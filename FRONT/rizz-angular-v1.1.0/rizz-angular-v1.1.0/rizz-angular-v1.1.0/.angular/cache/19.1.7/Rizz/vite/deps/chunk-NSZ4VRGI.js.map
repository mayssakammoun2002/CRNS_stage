{
  "version": 3,
  "sources": ["../../../../../../node_modules/@uppy/utils/lib/Translator.js", "../../../../../../node_modules/@uppy/core/lib/BasePlugin.js"],
  "sourcesContent": ["function _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n  return receiver;\n}\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\n// We're using a generic because languages have different plural rules.\n\n// eslint-disable-next-line no-use-before-define\n\nfunction insertReplacement(source, rx, replacement) {\n  const newParts = [];\n  source.forEach(chunk => {\n    // When the source contains multiple placeholders for interpolation,\n    // we should ignore chunks that are not strings, because those\n    // can be JSX objects and will be otherwise incorrectly turned into strings.\n    // Without this condition we’d get this: [object Object] hello [object Object] my <button>\n    if (typeof chunk !== 'string') {\n      return newParts.push(chunk);\n    }\n    return rx[Symbol.split](chunk).forEach((raw, i, list) => {\n      if (raw !== '') {\n        newParts.push(raw);\n      }\n\n      // Interlace with the `replacement` value\n      if (i < list.length - 1) {\n        newParts.push(replacement);\n      }\n    });\n  });\n  return newParts;\n}\n\n/**\n * Takes a string with placeholder variables like `%{smart_count} file selected`\n * and replaces it with values from options `{smart_count: 5}`\n *\n * @license https://github.com/airbnb/polyglot.js/blob/master/LICENSE\n * taken from https://github.com/airbnb/polyglot.js/blob/master/lib/polyglot.js#L299\n *\n * @param phrase that needs interpolation, with placeholders\n * @param options with values that will be used to replace placeholders\n */\nfunction interpolate(phrase, options) {\n  const dollarRegex = /\\$/g;\n  const dollarBillsYall = '$$$$';\n  let interpolated = [phrase];\n  if (options == null) return interpolated;\n  for (const arg of Object.keys(options)) {\n    if (arg !== '_') {\n      // Ensure replacement value is escaped to prevent special $-prefixed\n      // regex replace tokens. the \"$$$$\" is needed because each \"$\" needs to\n      // be escaped with \"$\" itself, and we need two in the resulting output.\n      let replacement = options[arg];\n      if (typeof replacement === 'string') {\n        replacement = dollarRegex[Symbol.replace](replacement, dollarBillsYall);\n      }\n      // We create a new `RegExp` each time instead of using a more-efficient\n      // string replace so that the same argument can be replaced multiple times\n      // in the same phrase.\n      interpolated = insertReplacement(interpolated, new RegExp(`%\\\\{${arg}\\\\}`, 'g'), replacement);\n    }\n  }\n  return interpolated;\n}\nconst defaultOnMissingKey = key => {\n  throw new Error(`missing string: ${key}`);\n};\n\n/**\n * Translates strings with interpolation & pluralization support.\n * Extensible with custom dictionaries and pluralization functions.\n *\n * Borrows heavily from and inspired by Polyglot https://github.com/airbnb/polyglot.js,\n * basically a stripped-down version of it. Differences: pluralization functions are not hardcoded\n * and can be easily added among with dictionaries, nested objects are used for pluralization\n * as opposed to `||||` delimeter\n *\n * Usage example: `translator.translate('files_chosen', {smart_count: 3})`\n */\nvar _onMissingKey = /*#__PURE__*/_classPrivateFieldLooseKey(\"onMissingKey\");\nvar _apply = /*#__PURE__*/_classPrivateFieldLooseKey(\"apply\");\nexport default class Translator {\n  constructor(locales, _temp) {\n    let {\n      onMissingKey = defaultOnMissingKey\n    } = _temp === void 0 ? {} : _temp;\n    Object.defineProperty(this, _apply, {\n      value: _apply2\n    });\n    Object.defineProperty(this, _onMissingKey, {\n      writable: true,\n      value: void 0\n    });\n    this.locale = {\n      strings: {},\n      pluralize(n) {\n        if (n === 1) {\n          return 0;\n        }\n        return 1;\n      }\n    };\n    if (Array.isArray(locales)) {\n      locales.forEach(_classPrivateFieldLooseBase(this, _apply)[_apply], this);\n    } else {\n      _classPrivateFieldLooseBase(this, _apply)[_apply](locales);\n    }\n    _classPrivateFieldLooseBase(this, _onMissingKey)[_onMissingKey] = onMissingKey;\n  }\n  /**\n   * Public translate method\n   *\n   * @param key\n   * @param options with values that will be used later to replace placeholders in string\n   * @returns string translated (and interpolated)\n   */\n  translate(key, options) {\n    return this.translateArray(key, options).join('');\n  }\n\n  /**\n   * Get a translation and return the translated and interpolated parts as an array.\n   *\n   * @returns The translated and interpolated parts, in order.\n   */\n  translateArray(key, options) {\n    let string = this.locale.strings[key];\n    if (string == null) {\n      _classPrivateFieldLooseBase(this, _onMissingKey)[_onMissingKey](key);\n      string = key;\n    }\n    const hasPluralForms = typeof string === 'object';\n    if (hasPluralForms) {\n      if (options && typeof options.smart_count !== 'undefined') {\n        const plural = this.locale.pluralize(options.smart_count);\n        return interpolate(string[plural], options);\n      }\n      throw new Error('Attempted to use a string with plural forms, but no value was given for %{smart_count}');\n    }\n    if (typeof string !== 'string') {\n      throw new Error(`string was not a string`);\n    }\n    return interpolate(string, options);\n  }\n}\nfunction _apply2(locale) {\n  if (!(locale != null && locale.strings)) {\n    return;\n  }\n  const prevLocale = this.locale;\n  Object.assign(this.locale, {\n    strings: {\n      ...prevLocale.strings,\n      ...locale.strings\n    },\n    pluralize: locale.pluralize || prevLocale.pluralize\n  });\n}", "/* eslint-disable class-methods-use-this */\n\n/**\n * Core plugin logic that all plugins share.\n *\n * BasePlugin does not contain DOM rendering so it can be used for plugins\n * without a user interface.\n *\n * See `Plugin` for the extended version with Preact rendering for interfaces.\n */\n\nimport Translator from '@uppy/utils/lib/Translator';\n\n/**\n * DefinePluginOpts marks all of the passed AlwaysDefinedKeys as “required” or “always defined”.\n */\n\nexport default class BasePlugin {\n  constructor(uppy, opts) {\n    this.uppy = uppy;\n    this.opts = opts != null ? opts : {};\n  }\n  getPluginState() {\n    const {\n      plugins\n    } = this.uppy.getState();\n    return (plugins == null ? void 0 : plugins[this.id]) || {};\n  }\n  setPluginState(update) {\n    const {\n      plugins\n    } = this.uppy.getState();\n    this.uppy.setState({\n      plugins: {\n        ...plugins,\n        [this.id]: {\n          ...plugins[this.id],\n          ...update\n        }\n      }\n    });\n  }\n  setOptions(newOpts) {\n    this.opts = {\n      ...this.opts,\n      ...newOpts\n    };\n    this.setPluginState(undefined); // so that UI re-renders with new options\n    this.i18nInit();\n  }\n  i18nInit() {\n    const translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);\n    this.i18n = translator.translate.bind(translator);\n    this.i18nArray = translator.translateArray.bind(translator);\n    this.setPluginState(undefined); // so that UI re-renders and we see the updated locale\n  }\n\n  /**\n   * Extendable methods\n   * ==================\n   * These methods are here to serve as an overview of the extendable methods as well as\n   * making them not conditional in use, such as `if (this.afterUpdate)`.\n   */\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  addTarget(plugin) {\n    throw new Error(\"Extend the addTarget method to add your plugin to another plugin's target\");\n  }\n  install() {}\n  uninstall() {}\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  update(state) {}\n\n  // Called after every state update, after everything's mounted. Debounced.\n  afterUpdate() {}\n}"],
  "mappings": "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",
  "names": []
}
